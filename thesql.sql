-- قاعدة البيانات المحدثة لموقع التعلم التفاعلية
-- ==============================================
-- تم دمج وتحديث المخططات بناءً على المتطلبات الجديدة

-- حذف الجداول القديمة إذا كانت موجودة لضمان عدم التعارض
DROP TABLE IF EXISTS user_answers CASCADE;
DROP TABLE IF EXISTS quiz_results CASCADE;
DROP TABLE IF EXISTS user_activated_courses CASCADE;
DROP TABLE IF EXISTS questions CASCADE;
DROP TABLE IF EXISTS quiz_models CASCADE; -- جدول جديد
DROP TABLE IF EXISTS courses CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS codes CASCADE;
DROP TABLE IF EXISTS phone CASCADE;

-- ==============================================
-- إنشاء الجداول الأساسية
-- ==============================================

-- 1. جدول المعلمين (جديد)
CREATE TABLE public.teachers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 2. جدول الدورات (معدل)
CREATE TABLE public.courses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  teacher_id BIGINT, -- من أنشأ الدورة
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  is_free BOOLEAN DEFAULT FALSE NOT NULL,
  difficulty TEXT,
  category TEXT,
  icon TEXT,
  rating REAL DEFAULT 0,
  students INTEGER DEFAULT 0,
  course_type TEXT --  New column for the course type
);

-- 3. جدول نماذج الاختبار (معدل)
CREATE TABLE public.quiz_models (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    course_id BIGINT NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
    teacher_id BIGINT, -- من أنشأ النموذج
    title TEXT NOT NULL,
    timer_type TEXT NOT NULL DEFAULT 'per_question', -- 'per_question', 'total_time', 'both'
    total_time_seconds INTEGER, -- الوقت الكلي بالثواني, يمكن أن يكون NULL
    questions_count INTEGER DEFAULT 0 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- 4. جدول الأسئلة (معدل لدعم خيارات الصور)
CREATE TABLE public.questions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  quiz_model_id BIGINT NOT NULL REFERENCES public.quiz_models(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  question_text TEXT,
  question_image TEXT,
  -- تم تحديث الحقل لدعم كائنات JSON للخيارات (نص أو صورة)
  options JSONB, 
  correct INTEGER NOT NULL,
  explanation TEXT,
  needs_calculator BOOLEAN DEFAULT FALSE NOT NULL,
  time_limit_seconds INTEGER DEFAULT 60 NOT NULL
);

-- 5. جدول أكواد التفعيل
CREATE TABLE public.codes (
    id SERIAL PRIMARY KEY,
    code VARCHAR(20) NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    used_at TIMESTAMP WITH TIME ZONE,
    use_code BOOLEAN DEFAULT FALSE,
    used_by VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE
);

-- 6. جدول المستخدمين (الهاتف) مع تعديل حقول الاسم
CREATE TABLE public.phone (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL, -- اسم الأول
    middle_name VARCHAR(100) NOT NULL, -- اسم الثاني (الأب)
    last_name VARCHAR(100) NOT NULL, -- اسم العائلة
    phone_number VARCHAR(20) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 7. جدول الدورات المفعلة للمستخدمين
CREATE TABLE public.user_activated_courses (
    id SERIAL PRIMARY KEY,
    phone_number VARCHAR(20) NOT NULL,
    course_id INTEGER NOT NULL,
    activated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    activation_code VARCHAR(20),
    FOREIGN KEY (phone_number) REFERENCES public.phone(phone_number) ON DELETE CASCADE,
    UNIQUE(phone_number, course_id)
);

-- 8. جدول نتائج الاختبارات (معدل ليرتبط بنماذج الاختبار)
CREATE TABLE public.quiz_results (
    id SERIAL PRIMARY KEY,
    phone_number VARCHAR(20) NOT NULL,
    course_id INTEGER NOT NULL, -- يبقى للرجوع السريع للدورة
    quiz_model_id INTEGER NOT NULL, -- حقل جديد لربط النتيجة بالنموذج
    score INTEGER DEFAULT 0,
    total_questions INTEGER DEFAULT 0,
    percentage DECIMAL(5,2) DEFAULT 0.00,
    completed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    session_id VARCHAR(100),
    FOREIGN KEY (phone_number) REFERENCES public.phone(phone_number) ON DELETE CASCADE
);

-- 9. جدول إجابات المستخدمين (معدل ليرتبط بنماذج الاختبار)
CREATE TABLE public.user_answers (
    id SERIAL PRIMARY KEY,
    phone_number VARCHAR(20) NOT NULL,
    quiz_model_id INTEGER NOT NULL, -- حقل جديد لربط الإجابة بالنموذج
    question_id INTEGER NOT NULL, -- حقل جديد لربط الإجابة بالسؤال
    question_number INTEGER NOT NULL,
    question_text TEXT NOT NULL,
    selected_answer INTEGER NOT NULL,
    correct_answer INTEGER NOT NULL,
    is_correct BOOLEAN NOT NULL,
    answered_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    quiz_session_id VARCHAR(100),
    FOREIGN KEY (phone_number) REFERENCES public.phone(phone_number) ON DELETE CASCADE
);

-- ==============================================
-- إنشاء الفهارس لتحسين الأداء
-- ==============================================
CREATE INDEX idx_codes_code ON codes(code);
CREATE INDEX idx_phone_number ON phone(phone_number);
CREATE INDEX idx_phone_email ON phone(email);
CREATE INDEX idx_user_activated_courses_phone ON user_activated_courses(phone_number);
CREATE INDEX idx_quiz_results_phone ON quiz_results(phone_number);
CREATE INDEX idx_user_answers_phone ON user_answers(phone_number);

-- ==============================================
-- الدوال (Functions)
-- ==============================================

-- دالة لتسجيل مستخدم جديد بالأسماء الثلاثة
CREATE OR REPLACE FUNCTION add_phone_registration(
    p_first_name VARCHAR(100),
    p_middle_name VARCHAR(100),
    p_last_name VARCHAR(100),
    p_phone_number VARCHAR(20),
    p_email VARCHAR(255)
)
RETURNS BOOLEAN AS $$
BEGIN
    INSERT INTO phone (first_name, middle_name, last_name, phone_number, email)
    VALUES (p_first_name, p_middle_name, p_last_name, p_phone_number, p_email)
    ON CONFLICT (phone_number) 
    DO UPDATE SET 
        first_name = EXCLUDED.first_name,
        middle_name = EXCLUDED.middle_name,
        last_name = EXCLUDED.last_name,
        email = EXCLUDED.email,
        updated_at = NOW();
    
    RETURN TRUE;
EXCEPTION
    WHEN unique_violation THEN
        RETURN FALSE;
END;
$$ LANGUAGE plpgsql;

-- دالة للحصول على معلومات المستخدم (محدثة)
CREATE OR REPLACE FUNCTION get_user_info(p_phone_number VARCHAR(20))
RETURNS TABLE(
    first_name VARCHAR(100),
    middle_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        p.first_name,
        p.middle_name,
        p.last_name,
        p.email,
        p.created_at
    FROM phone p
    WHERE p.phone_number = p_phone_number;
END;
$$ LANGUAGE plpgsql;

-- (بقية الدوال تبقى كما هي)

CREATE OR REPLACE FUNCTION generate_unique_code(code_length INTEGER DEFAULT 12)
RETURNS VARCHAR(20) AS $$
DECLARE
    new_code VARCHAR(20);
    code_exists BOOLEAN;
BEGIN
    LOOP
        new_code := LOWER(SUBSTRING(encode(gen_random_bytes(code_length), 'hex'), 1, code_length));
        SELECT EXISTS(SELECT 1 FROM codes WHERE code = new_code) INTO code_exists;
        IF NOT code_exists THEN
            RETURN new_code;
        END IF;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION create_new_activation_code()
RETURNS VARCHAR(20) AS $$
DECLARE
    new_code VARCHAR(20);
BEGIN
    new_code := generate_unique_code();
    INSERT INTO codes (code, is_active, use_code) VALUES (new_code, TRUE, FALSE);
    RETURN new_code;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION generate_bulk_codes(codes_count INTEGER DEFAULT 10)
RETURNS TABLE(generated_code VARCHAR(20)) AS $$
DECLARE
    i INTEGER;
    new_code VARCHAR(20);
BEGIN
    FOR i IN 1..codes_count LOOP
        new_code := create_new_activation_code();
        generated_code := new_code;
        RETURN NEXT;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION validate_activation_code(code_to_check VARCHAR(20))
RETURNS TABLE(is_valid BOOLEAN, use_code BOOLEAN, used_by VARCHAR(255)) AS $$
BEGIN
    RETURN QUERY SELECT (c.is_active AND c.code IS NOT NULL), c.use_code, c.used_by
    FROM codes c WHERE c.code = code_to_check;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION mark_code_as_used(code_to_update VARCHAR(20), user_phone VARCHAR(20))
RETURNS TABLE(success BOOLEAN) AS $$
BEGIN
    UPDATE codes SET used_at = NOW(), use_code = TRUE, used_by = user_phone
    WHERE code = code_to_update AND is_active = TRUE AND use_code = FALSE;
    RETURN QUERY SELECT FOUND;
END;
$$ LANGUAGE plpgsql;

-- دالة شاملة لتفعيل الدورة، تحل محل المنطق المتعدد الخطوات في PHP
CREATE OR REPLACE FUNCTION public.master_activate_course(
    p_phone_number text,
    p_course_id integer,
    p_activation_code text
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    code_record record;
BEGIN
    -- 1. التحقق من وجود المستخدم
    IF NOT EXISTS (SELECT 1 FROM public.phone WHERE phone_number = p_phone_number) THEN
        RETURN jsonb_build_object('success', false, 'message', 'المستخدم صاحب هذا الرقم غير موجود.');
    END IF;

    -- 2. التحقق من صحة الكود
    SELECT * INTO code_record FROM public.codes WHERE code = p_activation_code;
    IF NOT FOUND THEN
        RETURN jsonb_build_object('success', false, 'message', 'كود التفعيل الذي أدخلته غير صالح.');
    END IF;

    IF code_record.use_code = TRUE THEN
        RETURN jsonb_build_object('success', false, 'message', 'هذا الكود مستخدم بالفعل من قبل.');
    END IF;

    -- 3. التحقق مما إذا كانت الدورة مفعلة بالفعل لهذا المستخدم
    IF EXISTS (SELECT 1 FROM public.user_activated_courses WHERE phone_number = p_phone_number AND course_id = p_course_id) THEN
        RETURN jsonb_build_object('success', false, 'message', 'هذه الدورة مفعلة لديك بالفعل.');
    END IF;

    -- 4. كل الفحوصات نجحت، قم بتنفيذ العمليات
    -- أ. تفعيل الدورة للمستخدم
    INSERT INTO public.user_activated_courses (phone_number, course_id, activation_code)
    VALUES (p_phone_number, p_course_id, p_activation_code);

    -- ب. تحديث حالة الكود
    UPDATE public.codes
    SET use_code = TRUE, used_at = NOW(), used_by = p_phone_number
    WHERE id = code_record.id;

    -- 5. إرجاع رسالة نجاح
    RETURN jsonb_build_object('success', true, 'message', 'تم تفعيل الدورة بنجاح!');

EXCEPTION
    WHEN OTHERS THEN
        -- في حالة حدوث أي خطأ غير متوقع
        RETURN jsonb_build_object('success', false, 'message', 'حدث خطأ غير متوقع في قاعدة البيانات: ' || SQLERRM);
END;
$$;

CREATE OR REPLACE FUNCTION is_course_activated_for_user(p_phone_number VARCHAR(20), p_course_id INTEGER)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS(SELECT 1 FROM user_activated_courses WHERE phone_number = p_phone_number AND course_id = p_course_id);
END;
$$ LANGUAGE plpgsql;

-- دالة جديدة لجلب الدورات المفعلة للمستخدم
CREATE OR REPLACE FUNCTION public.get_user_activated_courses(p_phone_number text)
RETURNS TABLE(course_id integer)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT uac.course_id
    FROM public.user_activated_courses uac
    WHERE uac.phone_number = p_phone_number;
END;
$$;

-- ==============================================
-- المشغلات (Triggers)
-- ==============================================

-- مشغل لتحديث عدد الأسئلة في جدول نماذج الاختبار
CREATE OR REPLACE FUNCTION update_quiz_model_questions_count()
RETURNS TRIGGER AS $$
BEGIN
  IF (TG_OP = 'INSERT') THEN
    UPDATE public.quiz_models SET questions_count = questions_count + 1 WHERE id = NEW.quiz_model_id;
  ELSIF (TG_OP = 'DELETE') THEN
    UPDATE public.quiz_models SET questions_count = questions_count - 1 WHERE id = OLD.quiz_model_id;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER questions_count_trigger
AFTER INSERT OR DELETE ON public.questions
FOR EACH ROW EXECUTE FUNCTION update_quiz_model_questions_count();

-- مشغل لتحديث حقل updated_at تلقائياً
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_phone_updated_at
BEFORE UPDATE ON public.phone
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ==============================================
-- إعداد الأذونات (Permissions) - الحل الجذري والنهائي
-- ==============================================

-- الخطوة 1: تعطيل RLS بالكامل كإجراء وقائي
ALTER TABLE public.courses DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.quiz_models DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.questions DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.codes DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.phone DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_activated_courses DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.quiz_results DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_answers DISABLE ROW LEVEL SECURITY;

-- الخطوة 2: منح صلاحيات شاملة ومباشرة للأدوار الرئيسية
-- هذا يضمن أن الأدوار لديها الصلاحيات الأساسية بغض النظر عن RLS
GRANT USAGE ON SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON ALL TABLES IN SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO postgres, anon, authenticated, service_role;

-- 10. جدول جديد لتسجيل المحاولة الأولى فقط لكل طالب في كل دورة
CREATE TABLE public.student_first_attempt_results (
    id SERIAL PRIMARY KEY,
    phone_number VARCHAR(20) NOT NULL,
    course_id INTEGER NOT NULL,
    student_name TEXT, -- اسم الطالب الكامل
    course_title TEXT, -- عنوان الدورة
    final_score INTEGER NOT NULL,
    total_questions INTEGER NOT NULL,
    percentage DECIMAL(5,2) NOT NULL,
    attempted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (phone_number) REFERENCES public.phone(phone_number) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES public.courses(id) ON DELETE CASCADE,
    UNIQUE (phone_number, course_id) -- يضمن وجود سجل واحد فقط لكل طالب في كل دورة
);

-- ==============================================
-- انتهاء إعداد قاعدة البيانات
-- ==============================================
